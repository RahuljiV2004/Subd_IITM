#!/usr/bin/env python3
"""
MCP Server Startup Script with Claude Desktop Integration
Provides easy setup and testing for the Vulnerability Analysis MCP Server
"""

import os
import sys
import json
import platform
import subprocess
from pathlib import Path
from typing import Dict, Any, Optional


def get_claude_desktop_config_path() -> Optional[Path]:
    """Get the Claude Desktop configuration file path based on OS"""
    system = platform.system().lower()

    if system == "windows":
        config_path = (
            Path(os.environ.get("APPDATA", ""))
            / "Claude"
            / "claude_desktop_config.json"
        )
    elif system == "darwin":  # macOS
        config_path = (
            Path.home()
            / "Library/Application Support/Claude/claude_desktop_config.json"
        )
    elif system == "linux":
        config_path = Path.home() / ".config/Claude/claude_desktop_config.json"
    else:
        return None

    return config_path


def get_current_directory() -> Path:
    """Get the current MCP server directory"""
    return Path(__file__).parent.absolute()


def create_claude_desktop_config() -> Dict[str, Any]:
    """Create Claude Desktop configuration for MCP server"""
    mcp_server_dir = get_current_directory()

    # Use forward slashes for cross-platform compatibility
    cwd_path = str(mcp_server_dir).replace("\\", "/")
    pythonpath = f"{cwd_path}/src;{cwd_path.replace('/vulnerability-mcp-server', '')}"

    config = {
        "mcpServers": {
            "vulnerability-scanner": {
                "command": "python",
                "args": ["-m", "src.server"],
                "cwd": cwd_path,
                "env": {
                    "FLASK_BACKEND_URL": "http://localhost:5000",
                    "LOG_LEVEL": "INFO",
                    "MAX_CONCURRENT_SCANS": "3",
                    "PYTHONPATH": pythonpath.replace(";", os.pathsep),
                },
            }
        }
    }

    return config


def update_claude_desktop_config() -> bool:
    """Update Claude Desktop configuration with MCP server settings"""
    config_path = get_claude_desktop_config_path()

    if not config_path:
        print("❌ Unsupported operating system for automatic configuration")
        return False

    # Create directory if it doesn't exist
    config_path.parent.mkdir(parents=True, exist_ok=True)

    # Load existing configuration or create new one
    if config_path.exists():
        try:
            with open(config_path, "r", encoding="utf-8") as f:
                existing_config = json.load(f)
        except (json.JSONDecodeError, IOError) as e:
            print(f"⚠️  Error reading existing config: {e}")
            existing_config = {}
    else:
        existing_config = {}

    # Create new MCP server configuration
    new_config = create_claude_desktop_config()

    # Merge configurations
    if "mcpServers" not in existing_config:
        existing_config["mcpServers"] = {}

    existing_config["mcpServers"]["vulnerability-scanner"] = new_config["mcpServers"][
        "vulnerability-scanner"
    ]

    # Write updated configuration
    try:
        with open(config_path, "w", encoding="utf-8") as f:
            json.dump(existing_config, f, indent=2)

        print(f"✅ Claude Desktop configuration updated: {config_path}")
        print("📌 Restart Claude Desktop to apply changes")
        return True

    except IOError as e:
        print(f"❌ Error writing configuration: {e}")
        return False


def check_dependencies() -> bool:
    """Check if all required dependencies are installed"""
    print("🔍 Checking dependencies...")

    # Check Python version
    if sys.version_info < (3, 8):
        print("❌ Python 3.8+ is required")
        return False

    print(f"✅ Python {sys.version_info.major}.{sys.version_info.minor}")

    # Check required packages
    required_packages = ["mcp", "aiohttp", "pydantic"]
    missing_packages = []

    for package in required_packages:
        try:
            __import__(package)
            print(f"✅ {package}")
        except ImportError:
            print(f"❌ {package} (missing)")
            missing_packages.append(package)

    if missing_packages:
        print("\n📦 Install missing packages with:")
        print(f"pip install {' '.join(missing_packages)}")
        return False

    return True


def check_security_tools() -> bool:
    """Check if security tools are available"""
    print("\n🔧 Checking security tools...")

    tools = {
        "nmap": "nmap --version",
        "nuclei": "nuclei -version",
        "nikto": "nikto -Version",
        "ffuf": "ffuf -V",
    }

    available_tools = []
    missing_tools = []

    for tool, check_cmd in tools.items():
        try:
            result = subprocess.run(
                check_cmd.split(), capture_output=True, text=True, timeout=10
            )
            if result.returncode == 0:
                print(f"✅ {tool}")
                available_tools.append(tool)
            else:
                print(f"❌ {tool} (not working)")
                missing_tools.append(tool)
        except (subprocess.TimeoutExpired, FileNotFoundError):
            print(f"❌ {tool} (not found)")
            missing_tools.append(tool)

    if missing_tools:
        print(f"\n⚠️  Missing tools: {', '.join(missing_tools)}")
        print("💡 Run the tool installation scripts:")
        print("   Windows: .\\install_tools_windows_docker.ps1")
        print("   Linux/WSL: ./setup_tools.sh")

    return len(available_tools) > 0


def test_mcp_server() -> bool:
    """Test the MCP server by starting it briefly"""
    print("\n🧪 Testing MCP server...")

    try:
        # Start server process
        process = subprocess.Popen(
            [sys.executable, "-m", "src.server"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            cwd=get_current_directory(),
        )

        # Wait briefly to see if it starts successfully
        try:
            stdout, stderr = process.communicate(timeout=5)
            if process.returncode == 0:
                print("✅ MCP server started successfully")
                return True
            else:
                print(f"❌ MCP server failed to start: {stderr}")
                return False
        except subprocess.TimeoutExpired:
            process.terminate()
            print("✅ MCP server is running (terminated test)")
            return True

    except Exception as e:
        print(f"❌ Error testing MCP server: {e}")
        return False


def show_usage_examples():
    """Show usage examples for Claude Desktop"""
    print("\n📖 Usage Examples for Claude Desktop:")
    print("=" * 50)

    examples = [
        "Can you run a vulnerability scan on example.com?",
        "Please perform a comprehensive security assessment of my test server at 192.168.1.100",
        "Run a stealth vulnerability scan on https://myapp.example.com",
        "Scan the network range 192.168.1.0/24 for open services",
        "Perform web application security testing on my development site",
    ]

    for i, example in enumerate(examples, 1):
        print(f"{i}. {example}")

    print(
        "\n💡 The MCP server will automatically select appropriate tools based on your request!"
    )


def main():
    """Main setup and testing function"""
    print("🚀 MCP Vulnerability Scanner Setup")
    print("=" * 40)

    # Check dependencies
    if not check_dependencies():
        print("\n❌ Dependencies check failed. Please install missing packages.")
        sys.exit(1)

    # Check security tools
    tools_available = check_security_tools()
    if not tools_available:
        print(
            "\n⚠️  No security tools found, but MCP server can still run for tool management"
        )

    # Update Claude Desktop configuration
    print("\n⚙️  Configuring Claude Desktop...")
    if update_claude_desktop_config():
        print("✅ Configuration updated successfully")
    else:
        print("❌ Failed to update configuration")
        print("\n📋 Manual Configuration:")
        config = create_claude_desktop_config()
        print(json.dumps(config, indent=2))

    # Test MCP server
    if test_mcp_server():
        print("✅ MCP server test passed")
    else:
        print("❌ MCP server test failed")
        print("💡 Try running manually: python -m src.server")

    # Show usage examples
    show_usage_examples()

    print("\n🎉 Setup complete!")
    print("👉 Next steps:")
    print("   1. Restart Claude Desktop")
    print("   2. Open a new chat in Claude Desktop")
    print("   3. Try one of the example queries above")
    print("   4. The vulnerability scanner tools will be available to Claude!")


if __name__ == "__main__":
    main()

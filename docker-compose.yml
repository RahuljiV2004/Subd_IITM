services:
  # Security Tools Setup Service (runs once to install tools)
  security-tools-setup:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: security-tools-setup
    volumes:
      - ./Backend:/app
      - ./install_tools_wsl.sh:/app/install_tools_wsl.sh
      - ./docker_install_automation.sh:/app/docker_install_automation.sh
      - ./install_security_tools.sh:/app/install_security_tools.sh
      - ./verify_setup.py:/app/verify_setup.py
      - security-tools:/app/security-tools
      - tool-binaries:/app/tools
    environment:
      - DOCKER_MODE=true
      - SILENT=true
      - PYTHONPATH=/app
    command: >
      bash -c "
        echo 'Setting up security tools for containerized environment...' &&
        chmod +x /app/install_security_tools.sh &&
        /app/install_security_tools.sh &&
        echo 'Security tools setup completed successfully'
      "
    restart: "no"

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: flask-backend
    ports:
      - "5000:5000"
    volumes:
      - ./Backend:/app
      - security-tools:/app/security-tools
      - tool-binaries:/app/tools
    restart: unless-stopped
    depends_on:
      - mongo
      - security-tools-setup
    environment:
      - MONGO_URI=mongodb://mongo:27017/
      - USERNAME=vedad
      - DOCKER_MODE=true
      - PYTHONPATH=/app
      - PATH=/app/tools:/app/security-tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: react-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

  mongo:
    image: mongo:latest
    container_name: mongo-db
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=subdomain_scanner

  # Redis service for Celery task queue
  redis:
    image: redis:alpine
    container_name: redis-queue
    ports:
      - "6379:6379"
    restart: unless-stopped

  # Celery worker service
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: celery-worker
    volumes:
      - ./Backend:/app
      - security-tools:/app/security-tools
      - tool-binaries:/app/tools
    restart: unless-stopped
    depends_on:
      - mongo
      - redis
      - security-tools-setup
    environment:
      - MONGO_URI=mongodb://mongo:27017/
      - REDIS_URL=redis://redis:6379/0
      - USERNAME=vedad
      - DOCKER_MODE=true
      - PYTHONPATH=/app
      - PATH=/app/tools:/app/security-tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    command: celery -A celery_worker.celery worker --loglevel=info

  # MCP Vulnerability Scanner Server (Optional - use --profile mcp to enable)
  mcp-server:
    build:
      context: ./vulnerability-mcp-server
      dockerfile: Dockerfile.mcp
    container_name: mcp-vulnerability-scanner
    ports:
      - "${MCP_PORT:-8080}:8080"  # Configurable port
    volumes:
      - ./vulnerability-mcp-server/src:/app/src:ro  # Development mode
      - security-tools:/opt/security-tools:ro
      - tool-binaries:/usr/local/bin:ro
    restart: unless-stopped
    depends_on:
      - backend
      - security-tools-setup
    environment:
      - FLASK_BACKEND_URL=http://backend:5000
      - LOG_LEVEL=${MCP_LOG_LEVEL:-INFO}
      - MAX_CONCURRENT_SCANS=${MCP_MAX_SCANS:-3}
      - PYTHONPATH=/app/src:/app
      - PATH=/usr/local/bin:/opt/security-tools:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin
    profiles:
      - mcp
      - full

volumes:
  mongo-data:
  security-tools:
  tool-binaries:
